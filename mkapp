#!/usr/bin/env python


'''
Usage:
    mkapp --config <configfile> --project-name <name> [--force]
    mkapp --config <configfile> --load-schema <gql_schemafile>

Options:
    -f --force      Force overwrite of generated graphql schema file
'''

import os, sys
from collections import namedtuple
import docopt
import yaml
import jinja2
from snap import common

from griputil import load_query_specs
from griputil import create_gql_schema
from griputil import generate_app_source
from griputil import generate_resolver_source
from griputil import generate_handler_source
from griputil import generate_handler_function

from templates import MAIN_APP_TEMPLATE



def write_resolver_module(yaml_config: dict):
    project_home = common.load_config_var(yaml_config['globals']['project_home'])
    resolver_module = yaml_config['globals']['resolver_module']
    resolver_filename = f'{resolver_module}.py'
    resolver_filepath = os.path.join(project_home, resolver_filename)
    
    if not os.path.isfile(resolver_filepath):
        if args['--force'] == False:
            print(f'resolver file {resolver_filepath} already exists. Use -f to force overwrite.')
            return
        
        with open(resolver_filepath, 'w') as f:
            f.write(generate_resolver_source(yaml_config))


def write_handler_module(yaml_config: dict):
    project_home = common.load_config_var(yaml_config['globals']['project_home'])
    handler_module_name = yaml_config['globals']['handler_module']

    handler_module = __import__(handler_module_name)

    handler_filename = f'{handler_module_name}.py'
    handler_filepath = os.path.join(project_home, handler_filename)

    if os.path.isfile(handler_filepath):
        query_specs = load_query_specs(yaml_config)

        all_handlers = [f'{qspec.name}_func' for qspec in query_specs]
        new_handlers = []

        for handler_funcname in all_handlers:
            if not hasattr(handler_module, handler_funcname):
                new_handlers.append(handler_funcname)

        # update the file
        with open(handler_filepath, 'a') as f:
            for new_handler_name in new_handlers:                
                f.write(generate_handler_function(new_handler_name))
                f.write('\n')
    else:
        with open(handler_filepath, 'w') as f:
            f.write(generate_handler_source(yaml_config))


def main(args):
    #print(common.jsonpretty(args))

    configfile_name = args['<configfile>']
    yaml_config = common.read_config_file(configfile_name)
    project_home = common.load_config_var(yaml_config['globals']['project_home'])
    schema_filename = args['<gql_schemafile>']

    # add the project home to our PYTHONPATH
    sys.path.append(os.path.join(os.getcwd(), project_home))

    if args['--project-name']:
        schema = create_gql_schema(yaml_config)
        # TODO: account for file paths relative to current dir

        project_name = args['<name>']
        schema_filename = f'{project_name}.graphql'
        schema_outfile = os.path.join(project_home,
                                      schema_filename)

        if os.path.isfile(schema_outfile):
            if args['--force'] == False:
                print(f'schema file {schema_outfile} already exists. Use -f to force overwrite.')
                return
        
        with open(schema_outfile, 'w') as f:
            f.write(schema)
        
    elif args['--load-schema']:
        schema_infile = os.path.join(project_home,
                                     schema_filename)

        with open(schema_infile) as f:
            schema_data = f.read()


    write_handler_module(yaml_config)
    write_resolver_module(yaml_config)
    
    print(generate_app_source(schema_filename, yaml_config))


if __name__ == '__main__':
    args = docopt.docopt(__doc__)
    main(args)